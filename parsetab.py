
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE ELSE EQ FOR GE GT ID IF LBRACE LE LPAREN LT MINUS MULTIPLY NE NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON STRING TYPE WHILEprogram : statement_liststatement_list : statement statement_list\n                      | statementstatement : declaration\n                 | assignment\n                 | if_statement\n                 | print_statementdeclaration : TYPE ID SEMICOLON\n                   | TYPE ID ASSIGN expression SEMICOLONassignment : ID ASSIGN expression SEMICOLONif_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE\n                    | IF LPAREN expression RPAREN LBRACE statement_list RBRACEprint_statement : PRINT LPAREN expression RPAREN SEMICOLONexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression LT term\n                  | expression LE term\n                  | expression EQ term\n                  | expression GT term\n                  | expression GE term\n                  | expression NE termterm : factor\n            | term MULTIPLY factor\n            | term DIVIDE factorfactor : NUMBER\n              | STRING\n              | ID'
    
_lr_action_items = {'TYPE':([0,3,4,5,6,7,17,28,41,52,53,55,57,59,],[8,8,-4,-5,-6,-7,-8,-10,-9,8,-13,-12,8,-11,]),'ID':([0,3,4,5,6,7,8,14,15,16,17,18,28,29,30,31,32,33,34,35,36,37,38,41,52,53,55,57,59,],[9,9,-4,-5,-6,-7,13,19,19,19,-8,19,-10,19,19,19,19,19,19,19,19,19,19,-9,9,-13,-12,9,-11,]),'IF':([0,3,4,5,6,7,17,28,41,52,53,55,57,59,],[10,10,-4,-5,-6,-7,-8,-10,-9,10,-13,-12,10,-11,]),'PRINT':([0,3,4,5,6,7,17,28,41,52,53,55,57,59,],[11,11,-4,-5,-6,-7,-8,-10,-9,11,-13,-12,11,-11,]),'$end':([1,2,3,4,5,6,7,12,17,28,41,53,55,59,],[0,-1,-3,-4,-5,-6,-7,-2,-8,-10,-9,-13,-12,-11,]),'RBRACE':([3,4,5,6,7,12,17,28,41,53,54,55,58,59,],[-3,-4,-5,-6,-7,-2,-8,-10,-9,-13,55,-12,59,-11,]),'ASSIGN':([9,13,],[14,18,]),'LPAREN':([10,11,],[15,16,]),'SEMICOLON':([13,19,20,21,22,23,24,27,40,42,43,44,45,46,47,48,49,50,51,],[17,-28,28,-14,-23,-26,-27,41,53,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'NUMBER':([14,15,16,18,29,30,31,32,33,34,35,36,37,38,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'STRING':([14,15,16,18,29,30,31,32,33,34,35,36,37,38,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'MULTIPLY':([19,21,22,23,24,42,43,44,45,46,47,48,49,50,51,],[-28,37,-23,-26,-27,37,37,37,37,37,37,37,37,-24,-25,]),'DIVIDE':([19,21,22,23,24,42,43,44,45,46,47,48,49,50,51,],[-28,38,-23,-26,-27,38,38,38,38,38,38,38,38,-24,-25,]),'PLUS':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,29,-14,-23,-26,-27,29,29,29,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'MINUS':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,30,-14,-23,-26,-27,30,30,30,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'LT':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,31,-14,-23,-26,-27,31,31,31,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'LE':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,32,-14,-23,-26,-27,32,32,32,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'EQ':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,33,-14,-23,-26,-27,33,33,33,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'GT':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,34,-14,-23,-26,-27,34,34,34,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'GE':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,35,-14,-23,-26,-27,35,35,35,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'NE':([19,20,21,22,23,24,25,26,27,42,43,44,45,46,47,48,49,50,51,],[-28,36,-14,-23,-26,-27,36,36,36,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'RPAREN':([19,21,22,23,24,25,26,42,43,44,45,46,47,48,49,50,51,],[-28,-14,-23,-26,-27,39,40,-15,-16,-17,-18,-19,-20,-21,-22,-24,-25,]),'LBRACE':([39,56,],[52,57,]),'ELSE':([55,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,52,57,],[2,12,54,58,]),'statement':([0,3,52,57,],[3,3,3,3,]),'declaration':([0,3,52,57,],[4,4,4,4,]),'assignment':([0,3,52,57,],[5,5,5,5,]),'if_statement':([0,3,52,57,],[6,6,6,6,]),'print_statement':([0,3,52,57,],[7,7,7,7,]),'expression':([14,15,16,18,],[20,25,26,27,]),'term':([14,15,16,18,29,30,31,32,33,34,35,36,],[21,21,21,21,42,43,44,45,46,47,48,49,]),'factor':([14,15,16,18,29,30,31,32,33,34,35,36,37,38,],[22,22,22,22,22,22,22,22,22,22,22,22,50,51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement -> declaration','statement',1,'p_statement','parser.py',21),
  ('statement -> assignment','statement',1,'p_statement','parser.py',22),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',23),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',24),
  ('declaration -> TYPE ID SEMICOLON','declaration',3,'p_declaration','parser.py',29),
  ('declaration -> TYPE ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration','parser.py',30),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser.py',45),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_statement',11,'p_if_statement','parser.py',109),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','if_statement',7,'p_if_statement','parser.py',110),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',117),
  ('expression -> term','expression',1,'p_expression','parser.py',121),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',122),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',123),
  ('expression -> expression LT term','expression',3,'p_expression','parser.py',124),
  ('expression -> expression LE term','expression',3,'p_expression','parser.py',125),
  ('expression -> expression EQ term','expression',3,'p_expression','parser.py',126),
  ('expression -> expression GT term','expression',3,'p_expression','parser.py',127),
  ('expression -> expression GE term','expression',3,'p_expression','parser.py',128),
  ('expression -> expression NE term','expression',3,'p_expression','parser.py',129),
  ('term -> factor','term',1,'p_term','parser.py',136),
  ('term -> term MULTIPLY factor','term',3,'p_term','parser.py',137),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',138),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',145),
  ('factor -> STRING','factor',1,'p_factor','parser.py',146),
  ('factor -> ID','factor',1,'p_factor','parser.py',147),
]
